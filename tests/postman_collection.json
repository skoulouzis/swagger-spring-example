{
	"info": {
		"_postman_id": "2aed0b51-7c31-44cc-a310-a70e1f6a8097",
		"name": "Simple API",
		"description": "A simple API to learn how to write OpenAPI Specification",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "persons",
			"item": [
				{
					"name": "Gets some persons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "078c8b1a-32b8-4d0f-92fc-fbb079cce211",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var pageSize = pm.environment.get(\"pageSize\");",
									"tests[\"Number of array items: \"+jsonData.items.length+ \" should be eqaual to pageSize:\"+pageSize] = jsonData.items.length == pageSize;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/persons?pageSize={{pageSize}}&pageNumber={{pageNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								},
								{
									"key": "pageNumber",
									"value": "{{pageNumber}}"
								}
							]
						},
						"description": "Returns a list containing all persons. The list supports paging."
					},
					"response": []
				},
				{
					"name": "Creates a person",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4441b58b-423b-4bf2-9889-f801f6680aee",
								"exec": [
									"pm.test(\"response must be valid\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "The person to create."
						},
						"url": {
							"raw": "{{base_url}}/persons",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "Adds a new person to the persons list."
					},
					"response": []
				},
				{
					"name": "Gets a person",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8411f529-2747-45e7-9cad-c7bd489c6ed6",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/persons/:username",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"persons",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": ""
								}
							]
						},
						"description": "Returns a single person for its username."
					},
					"response": []
				},
				{
					"name": "Deletes a person",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b3d198f-7c16-4d5e-ab70-000adfdebc4a",
								"exec": [
									"pm.test(\"response must be valid\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{base_url}}/persons/:username",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"persons",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": ""
								}
							]
						},
						"description": "Delete a single person identified via its username"
					},
					"response": []
				},
				{
					"name": "Gets a person's friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dcece00-4dee-40d8-ab96-7ef71e82b600",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/persons/:username/friends?pageSize={{pageSize}}&pageNumber={{pageNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"persons",
								":username",
								"friends"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								},
								{
									"key": "pageNumber",
									"value": "{{pageNumber}}"
								}
							],
							"variable": [
								{
									"key": "username",
									"value": ""
								}
							]
						},
						"description": "Returns a list containing all persons. The list supports paging."
					},
					"response": []
				}
			],
			"description": "Folder for persons"
		}
	]
}